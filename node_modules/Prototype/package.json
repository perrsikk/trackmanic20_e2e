{
  "_args": [
    [
      "https://github.com/Perennials/prototype-js/tarball/master",
      "/home/nick/Workspace/tapcore-qa/e2e"
    ]
  ],
  "_from": "https://github.com/Perennials/prototype-js/tarball/master",
  "_id": "Prototype@1.11.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/Prototype",
  "_phantomChildren": {},
  "_requested": {
    "name": null,
    "raw": "https://github.com/Perennials/prototype-js/tarball/master",
    "rawSpec": "https://github.com/Perennials/prototype-js/tarball/master",
    "scope": null,
    "spec": "https://github.com/Perennials/prototype-js/tarball/master",
    "type": "remote"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://github.com/Perennials/prototype-js/tarball/master",
  "_shasum": "d13d49e44224cfed10674e863f524db3d4e862e1",
  "_shrinkwrap": null,
  "_spec": "https://github.com/Perennials/prototype-js/tarball/master",
  "_where": "/home/nick/Workspace/tapcore-qa/e2e",
  "author": {
    "email": "borislav.asdf@gmail.com",
    "name": "Borislav Peev"
  },
  "bugs": {
    "url": "https://github.com/perennials/prototype-js/issues"
  },
  "dependencies": {},
  "description": "Extensions to the JS stdlib",
  "devDependencies": {
    "Unitest": "https://github.com/perennials/unitest-js/tarball/master"
  },
  "engine": [
    "node >= 4.0.0"
  ],
  "homepage": "https://github.com/perennials/prototype-js#readme",
  "main": "Prototype.js",
  "name": "Prototype",
  "optionalDependencies": {},
  "readme": "Prototype\n=========\nExtensions to the JavaScript standard library for Node.js and browser (the\nbrowser support is in untested state since the library transition to ES6, but\nprobably still works).\n\nMost notably this module provides better OOP support with classes,\ninheritance, mixins and interfaces with no runtime overhead, staying\nas close as possible to the native JS syntax.\n\n```\nnpm install https://github.com/Perennials/prototype-js/tarball/master\n```\n\n<!-- MarkdownTOC -->\n\n- [Object](#object)\n\t- [.merge()](#merge)\n\t- [.mergeDeep()](#mergedeep)\n\t- [.duplicate()](#duplicate)\n\t- [Object.filter()](#objectfilter)\n\t- [.instanceof()](#instanceof)\n\t- [Object.isObject()](#objectisobject)\n\t- [Object.newArgs()](#objectnewargs)\n\t- [Object.values()](#objectvalues)\n- [Array](#array)\n\t- [get/set .last](#getset-last)\n\t- [.duplicate()](#duplicate-1)\n\t- [.merge()](#merge-1)\n\t- [.unique()](#unique)\n\t- [.contains()](#contains)\n\t- [.containsEx()](#containsex)\n\t- [.indexOfEx()](#indexofex)\n\t- [.indexOfEx()](#indexofex-1)\n- [Function](#function)\n\t- [.define()](#define)\n\t- [.extend()](#extend)\n\t- [.static()](#static)\n\t- [.implement()](#implement)\n\t- [.mixin()](#mixin)\n\t- [ResolveMixins()](#resolvemixins)\n\t- [.bindArgsAfter()](#bindargsafter)\n\t- [.bindArgsBefore()](#bindargsbefore)\n- [String](#string)\n\t- [.indexOfEx()](#indexofex-2)\n\t- [.lastIndexOfEx()](#lastindexofex)\n\t- [.splitFirst()](#splitfirst)\n\t- [.splitLast()](#splitlast)\n\t- [.startsWith()](#startswith)\n\t- [.endsWith()](#endswith)\n\t- [.count()](#count)\n\t- [.contains()](#contains-1)\n\t- [.toFirstUpperCase()](#tofirstuppercase)\n\t- [String.isString()](#stringisstring)\n- [Number](#number)\n\t- [Number.isNumber()](#numberisnumber)\n- [Boolean](#boolean)\n\t- [Boolean.isBoolean()](#booleanisboolean)\n- [RegExp](#regexp)\n\t- [.resetIndex()](#resetindex)\n\t- [.pushIndex()](#pushindex)\n\t- [.popIndex()](#popindex)\n- [Quick OOP example](#quick-oop-example)\n- [TODO](#todo)\n- [Authors](#authors)\n\n<!-- /MarkdownTOC -->\n\nObject\n------\n\n### .merge()\nCopies references of properties from another object to this one.\n\n```js\n.merge(\n\tobj:Object\n) : this;\n```\n\n### .mergeDeep()\nCopies references of properties from another object to this one recursively.\nIf a property of this object that is not an `Object` is found in the object\nto be merged with, the property will be replaced.\n\n```js\n.mergeDeep(\n\tobj:Object\n) : this;\n```\n\n### .duplicate()\nCreates object with duplicates of the properties of this object. This function\nworks recursively and will call `.duplicate()` for the properties that implement\nthis function. Objects of custom classes will not be duplicated but passed as\nreference.\n\n```js\n.duplicate() : Object;\n```\n\n### Object.filter()\nFilters out all properties out of `obj` for which the callback is not true.\nThis function will modify the object in place. While this behaviour is\ninconsistent with `Array.filter()`, it is necessary for the function to be\nable to work on any object without knowledge how to construct a new instance\nof the object's class and copy its properties.\n\n```js\nObject.filter(\n\tobj:Object,\n\tcallback:function( value:any, key:String, object:Object ),\n\tthisArg:mixed|undefined\n) : obj;\n```\n\n### .instanceof()\n**Experimental.** Checks if the object is instanceof certain class. This\nfunction first tries to use the `instanceof` operator, and if it fails, it\nchecks the list of implemented interfaces. Therefore this function has\nperformnace overhead over the `instanceof` operator. See\n[.implement()](#implement), [.mixin()](#mixin) and [Quick OOP example](#quick-oop-example).\n\n```js\n.instanceof(\n\tproto:Function\n) : Boolean;\n```\n\n### Object.isObject()\nChecks if the argument is strictly an `Object` and not a subclass of `Object`.\n\n```js\nObject.isObject(\n\tobj:any\n) : Boolean;\n```\n\n### Object.newArgs()\nCreates a new object passing a list of arguments to the constructor.\nCredits <http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible>.\n\nThis is equivalent to `Function.apply()` but for `new`. So one can invoke `new` on some class with\narray list of arguments, e.g.:\n\n```js\n// this\nObject.newArgs( Array, [ 1, 2 ] );\n// is equivalent to this\nnew Array( 1, 2 );\n```\n\n```js\nObject.newArgs(\n\tctor:Function,\n\targs:Array\n) : Object;\n```\n\n### Object.values()\nRetrieves the values of all own properties of an object.\n\n```js\nObject.values(\n\tobj:Object\n) : String[];\n```\n\n\nArray\n-----\n\n### get/set .last\nRetrieves or sets the last element of the array.\nReturns `undefined` if attempting to get the last element of zero-length array.\n\nExample:\n\n```js\nvar arr = [ 1, 2 ];\nif ( arr.last === 2 ) {\n\tarr.last = 3;\n\t// now the array is [ 1, 3 ]\n}\n```\n\n### .duplicate()\nCreates array with duplicates of the items of this array. This function works\nrecursively and will call `.duplicate()` for the items that implement this\nfunction.\n\n```js\n.duplicate() : Array;\n```\n\n\n### .merge()\nThis is alias for `.concat()`.\n\n\n### .unique()\nReturns a new array containing a unique set of the elements of the array.\nMeaning if some element appears twice it will be present only once in the\nresulting array. Items are compared with `===`.\n\n```js\n.unique(\n\tvalue:any\n) : Boolean;\n```\n\n\n### .contains()\nChecks if the array contains specific value. Uses `.indexOf()` internally.\n\n```js\n.contains(\n\tvalue:any\n) : Boolean;\n```\n\n\n### .containsEx()\nChecks if the array contains specific value, possibly with comparison callback.\n\n```js\n.contains(\n\tvalue:any|function( item:any, index:Number, array:Array )\n) : Boolean;\n```\n\n\n### .indexOfEx()\nSearches the array for an element. This is analogous to `.indexOf()`,\nexcept that if the value to search for is a `Function` it will be used\nas comparison callback.\n\n```js\n.indexOfEx(\n\tvalue:any|function( item:any, index:Number, array:Array ):Boolean\n\toffset:Number|undefined\n) : Boolean;\n```\n\n### .indexOfEx()\nSearches the array for an element backwards. This is analogous to `.lastIndexOf()`,\nexcept that if the value to search for is a `Function` it will be used\nas comparison callback.\n\n```js\n.lastIndexOfEx(\n\tvalue:any|function( item:any, index:Number, array:Array ):Boolean\n\toffset:Number|undefined\n) : Boolean;\n```\n\n\nFunction\n--------\n\n### .define()\nDefines properties in the prototype of the function. Each property will be\nadded using `Object.defineProperty()`. The defined properties will be writeable\nand non-enumerable.\n\nThis function was meant for ES5 OOP syntax candy. It should not be used with ES6\nsince ES6 has native class syntax.\n\n```js\n.define(\n\tproperties:Object\n) : this;\n```\n\nExample:\n\n```js\nfunction MyClass () {\n\tthis._something = null;\n}\n\nMyClass.define( {\n\tgetSomething: function () {\n\t\treturn this._something;\n\t},\n\n\tsetSomething: function ( value ) {\n\t\treturn this._something = value;\n\t}\n} );\n\nvar my = new MyClass();\nmy.setSomething( 5 );\nif ( my.getSomething() === 5 ) {\n\t// true\n}\n```\n\n### .extend()\nWill make function's prototype to inherit from given parent's prototype and\noptionally define some methods.\n\nThis function was meant for ES5 OOP syntax candy. It should not be used with ES6\nsince ES6 has native class syntax.\n\n```js\n.extend(\n\tbaseClass:Function\n\tprops:Object|undefined\n) : this;\n```\n\nExample:\n\n```js\nclass MyClass3 {\n\tconsturctor () {\n\t\tthis._something = null;\n\t}\n\n\tsetSomethin ( value ) {\n\t\treturn this._something = value;\n\t}\n}\n\nfunction MyClass2 () {\n\n}\n\nMyClass2.extend( MyClass3 );\n\nfunction MyClass () {\n\n}\n\nMyClass.extend( MyClass2, {\n\tgetSomething: function () {\n\t\treturn this._something;\n\t}\n} );\n\nvar my = new MyClass();\nmy.setSomething( 5 );\nif ( my.getSomething() === 5 ) {\n\t// true\n}\n```\n\n### .static()\nDefines properties in the the function object itself. Each property will be\nadded using `Object.defineProperty()`. The defined properties will be writeable\nand non-enumerable.\n\nThis function was meant for ES5 OOP syntax candy. ES6 has native syntax for static\nmethods, but not for static properties.\n\n```js\n.static(\n\tprops:Object\n) : this;\n```\n\nExample:\n\n```js\nfunction MyClass1 () {\n\n}\n\nclass MyClass2 {\n\n}\n\nMyClass1.static( {\n\tSomething: 1\n} );\n\nMyClass2.static( {\n\tSomething: 2\n} );\n\nif ( MyClass1.Something == MyClass2.Something ) {\n\t// false\n}\n```\n\n### .implement()\nEnforces that a class implements certain interface(s) and throws an `Error` if\nit does not. This function also makes it possible to use\n[Object.instanceof()](#instanceof) to check if an object implements an\ninterfaces. `.implement()` itself doesn't have runtime overhead - the implementation\ncheck is done only once when the class defined, but `Object.instanceof()` could not\npossibly outperform the `instanceof` operator.\n\nInterface in this case is a class (or a function prototype in ES5 terms) or just an\nobject with properties. The properties of the object or the methods in the prototype\nwill be checked against the methods of the class that is supposed to implement them.\n\n```js\n.implement(\n\t...iface:Object|Function\n) : this;\n```\n\nExample:\n\n```js\nfunction ILeggedEarthling () {\n}\n\nILeggedEarthling.define( {\n\tgetLegs: function() {}\n} );\n\nclass Animal {\n\n}\n\ntry {\n\tAnimal.implement( ILeggedEarthling );\n}\ncatch ( e ) {\n\t// getLegs is not implemented\n\tconsole.log( e.toString() );\n}\n```\n\n### .mixin()\nMixes the prototype of another function into the prototype of this function.\nIt is also possible to just mixin the properties of an object that is not a\nfunction. The function takes variable number of arguments where the last one may be\n[ResolveMixins()](#resolvemixins).\n\n**Experimental:** This function was OK with ES5, but it is not fully clear if\nthis may affect future code when the JavaScript matures more, or if it may\nnegatively affect compiler optimisations.\n\n```js\n.mixin(\n\t...proto:Object|Function|ResolveMixins\n) : this;\n```\n\nExample:\n\n```js\nfunction MyTrait1 () {\n\n}\n\nMyTrait1.define( {\n\treusablePiece1: function () {\n\n\t};\n} );\n\nfunction MyTrait2 () {\n\n}\n\nMyTrait2.define( {\n\treusablePiece2: function () {\n\n\t};\n} );\n\nclass MyClass {\n\n}\n\nMyClass.mixin( MyTrait1, MyTrait2 );\n```\n\n\n### ResolveMixins()\nPassed as last argument to [Function.mixin()](#mixin) to resolve conflicts\nwhere different mixins define a function with the same name.\n\nThe function accepts single argument where they key is the name of the\nconflicting function to be resolved and the value is the preferred mixin to\nuse the function from.\n\n```js\nResolveMixins(\n\tresolve:Object\n);\n```\n\nExample:\n\n```js\n// if B and C has method overlappingMember(), the one from B will be used.\nA.mixin( B, C, ResolveMixins( { 'overlappingMember': B } ) );\n```\n\n### .bindArgsAfter()\nCreates a wrapper function that always calls another function with the same\narguments. Bound arguments will be appended to any arguments that the function\nis called with.\n\n```js\n.bindArgsAfter(\n\t...args:any\n) : Function;\n```\n\nExample:\n\n```js\nvar myLog = console.log.bindArgsAfter( 1 );\n// this will print 2 1\nmyLog.call( console, 2 );\n```\n\n\n### .bindArgsBefore()\nCreates a wrapper function that always calls another function with the same arguments.\nBound arguments will be prepended to any arguments that the function is called with.\n\n```js\n.bindArgsBefore(\n\t...args:any\n) : Function;\n```\n\nExample:\n\n```js\nvar myLog = console.log.bindArgsBefore( 1 );\n// this will print 1 2\nmyLog.call( console, 2 );\n```\n\nString\n------\n\n### .indexOfEx()\nExtends the built-in `String.indexOf()` with support of `RegExp`.\n\nIf the last argument is passed its `.length` property will be populated with\nthe length of the matched regular expression, because unlike searching for\na static string, the length of the match may be variable.\n\n```js\n.indexOfEx(\n\tsearch:String|RegExp,\n\toffset:Number|undefined\n\tret:Object|undefined\n) : Number;\n```\n\n### .lastIndexOfEx()\nExtends the built-in `String.lastIndexOf()` with support of `RegExp`.\n\nIf the last argument is passed its `.length` property will be populated with\nthe length of the matched regular expression, because unlike searching for\na static string, the length of the match may be variable.\n\n**Warning:** This function may have significant performance impact. JavaScript\ndoes not support searching matching regular expressions from the end of the\nstring, so matching will be performed repeatedly on the whole string to find\nthe last matching position. Therefore use with care, the function is provided\nmostly for consistency.\n\n```js\n.lastIndexOfEx(\n\tsearch:String|RegExp,\n\toffset:Number|undefined\n\tret:Object|undefined\n) : Number;\n```\n\n### .splitFirst()\nSplits a string on the first occurrence of substring.\n\n```js\n.splitFirst(\n\tsearch:String|RegExp,\n\toffset:Number|undefined\n) : Object;\n```\n\nThe returned object will look like this, where length can be used\nto determine the length of the matched regular expression, if one\nis using `RegExp` to search for.\n\n```js\n{\n\tleft: String,\n\tright: String|undefined,\n\tlength: Number\n}\n```\n\n### .splitLast()\nSplits a string on the last occurrence of substring.\n\n```js\n.splitLast(\n\tsearch:String|RegExp,\n\toffset:Number|undefined\n) : Object;\n```\n\nThe returned object will look like this, where length can be used\nto determine the length of the matched regular expression, if one\nis using `RegExp` to search for.\n\n```js\n{\n\tleft: String,\n\tright: String|undefined,\n\tlength: Number\n}\n```\n\n### .startsWith()\nJust a polyfill for `String.startsWith()`, if it is missing.\n\n### .endsWith()\nJust a polyfill for `String.endsWith()`, if it is missing.\n\n### .count()\nCounts the occurrences of substring in a string.\n\n```js\n.count(\n\tsearch:String\n) : Number;\n```\n\n### .contains()\nChecks if a substring is contained within the string.\n\n```js\n.contains(\n\tsearch:String\n) : Boolean;\n```\n\n### .toFirstUpperCase()\nConverts the first letter of the string to upper case and returns the new string.\n\n```js\n.toFirstUpperCase() : String;\n```\n\n### String.isString()\nChecks if argument is a String object or string primitive. This function\nchecks for both typeof and instanceof. For explanation why this is needed\ncheck [Proper type determination in JavaScript](https://github.com/Perennials/articles/blob/master/Proper-type-determination-in-JavaScript.md)\n\n```js\nString.isString(\n\tobj:any\n) : Boolean;\n```\n\nNumber\n------\n\n### Number.isNumber()\nChecks if argument is a Number object or number primitive. This function\nchecks for both typeof and instanceof. For explanation why this is needed\ncheck [Proper type determination in JavaScript](https://github.com/Perennials/articles/blob/master/Proper-type-determination-in-JavaScript.md)\n\n```js\nNumber.isNumber(\n\tobj:any\n) : Boolean;\n```\n\n\nBoolean\n-------\n\n### Boolean.isBoolean()\nChecks if argument is a Boolean object or boolean primitive. This function\nchecks for both typeof and instanceof. For explanation why this is needed\ncheck [Proper type determination in JavaScript](https://github.com/Perennials/articles/blob/master/Proper-type-determination-in-JavaScript.md)\n\n```js\nBoolean.isBoolean(\n\tobj:any\n) : Boolean;\n```\n\nRegExp\n------\n\n### .resetIndex()\nResets the `.lastIndex` property to zero.\n\n```js\n.resetIndex() : this;\n```\n\n### .pushIndex()\nSaves the `.lastIndex` property to an internal stack. Useful for reusing\nRegExp object in recursive searches.\n\n```js\n.pushIndex() : this;\n```\n\n### .popIndex()\nRestores the `.lastIndex` property from an internal stack. Useful for reusing\nRegExp object in recursive searches.\n\n```js\n.popIndex() : this;\n```\n\n\n## Quick OOP example\n\n```js\n\"use strict\";\n\n// this modifies the global built in objects, it does not export anything\n// only needs to be included once\nrequire( 'Prototype' );\n\n// classes\n\nclass Earthling {\n\n\tconstructor () {\n\t\tthis._init = 1;\n\t}\n\n\tgetType () {\n\t\treturn 'Earthling';\n\t}\n\n}\n\nvar earthling = new Earthling();\n\n// inheritance\nclass Animal extends Earthling {\n\n\tconstructor () {\n\t\t// call the base constructor\n\t\tsuper();\n\n\t\t// call the constructor of the mixin\n\t\tTLeggedEarthling.call( this, 5 );\n\t}\n\t\n\tgetType () {\n\t\treturn 'Animal';\n\t\t// || we could call the parent method Earthling.prototype.getType.call( this );\n\t}\n}\n\n// intefaces (experimental)\n\nfunction ILeggedEarthling () {\n}\n\nILeggedEarthling.define( {\n\tgetLegs: function() {}\n} );\n\ntry {\n\tAnimal.implement( ILeggedEarthling );\n}\ncatch ( e ) {\n\t// getLegs is not implemented\n\tconsole.log( e.toString() );\n}\n\n// mixins\n\n// we use the function (ES5) syntax here to be able to reuse it later,\n// because ES6 forbids calling the constructor of a class without new\nfunction TLeggedEarthling ( nlegs ) {\n\tthis._nLegs = nlegs;\n}\n\nTLeggedEarthling.define( {\n\tgetLegs: function() {\n\t\treturn this._nLegs;\n\t}\n} );\n\nAnimal.mixin( TLeggedEarthling ).implement( ILeggedEarthling );\n\n// we can mixin multiple mixins\n// and we can resolve overlapping functions in mixins.\n// this will copy the contants of Templ1 and Templ2\n// in the prototype of Animal choosing Templ1.func1 over Templ2.func2\n// and choosing Templ2.func2 over Templ1.func2,\n// assuming that we had Templ1 and Templ2 with func1 and func2\n//\n// Animal.mixin( Templ1, Templ2, ResolveMixins( {\n// \tfunc1: Templ1,\n// \tfunc2: Templ2,\n// } ) );\n\nvar animal = new Animal();\n\n// this will pass\nif ( animal instanceof Earthling ) {\n\tconsole.log( animal.getType(), 'has', animal.getLegs(), 'legs' );\n}\n\n// this will not pass\nif ( animal instanceof TLeggedEarthling ) {\n\tconsole.error( 'should not happen' );\n}\n\n// this will not pass\nif ( animal instanceof ILeggedEarthling ) {\n\tconsole.error( 'should not happen' );\n}\n\n// to check instanceof iterfaces and traits we need to use a hack\n// this has runtime performance cost, but should be insignificant\nif ( animal.instanceof( ILeggedEarthling ) ) {\n\tconsole.log( animal.getType(), 'is legged earthling' );\n}\n\n// this also works\nif ( animal.instanceof( Earthling ) ) {\n\tconsole.log( animal.getType(), 'is', Earthling.prototype.getType.call( animal ) );\n}\n```\n\nTODO\n----\n\n* `Object.cmp()`, `Array.cmp()` (copy from unitest-js)\n* `Array.diff()`\n\nAuthors\n-------\n\nBorislav Peev (borislav.asdf at gmail dot com)",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/perennials/prototype-js.git"
  },
  "scripts": {
    "test": "node ./tests/tests.js"
  },
  "version": "1.11.0"
}
